{"/home/benson/Workspace/osp/smssync/src/index.js":{"path":"/home/benson/Workspace/osp/smssync/src/index.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":112}},"2":{"start":{"line":8,"column":14},"end":{"line":8,"column":55}},"3":{"start":{"line":10,"column":15},"end":{"line":10,"column":57}},"4":{"start":{"line":12,"column":22},"end":{"line":12,"column":72}},"5":{"start":{"line":14,"column":18},"end":{"line":14,"column":64}},"6":{"start":{"line":16,"column":18},"end":{"line":16,"column":64}},"7":{"start":{"line":18,"column":39},"end":{"line":18,"column":93}},"8":{"start":{"line":28,"column":15},"end":{"line":28,"column":40}},"9":{"start":{"line":31,"column":18},"end":{"line":31,"column":24}},"10":{"start":{"line":32,"column":0},"end":{"line":32,"column":30}},"11":{"start":{"line":33,"column":20},"end":{"line":33,"column":28}},"12":{"start":{"line":34,"column":0},"end":{"line":34,"column":34}},"13":{"start":{"line":35,"column":18},"end":{"line":35,"column":24}},"14":{"start":{"line":37,"column":0},"end":{"line":37,"column":30}},"15":{"start":{"line":38,"column":23},"end":{"line":38,"column":98}},"16":{"start":{"line":39,"column":0},"end":{"line":39,"column":40}},"17":{"start":{"line":41,"column":16},"end":{"line":280,"column":1}},"18":{"start":{"line":43,"column":18},"end":{"line":53,"column":11}},"19":{"start":{"line":56,"column":2},"end":{"line":56,"column":38}},"20":{"start":{"line":58,"column":2},"end":{"line":58,"column":41}},"21":{"start":{"line":59,"column":2},"end":{"line":61,"column":6}},"22":{"start":{"line":63,"column":2},"end":{"line":98,"column":3}},"23":{"start":{"line":65,"column":4},"end":{"line":97,"column":7}},"24":{"start":{"line":67,"column":21},"end":{"line":67,"column":80}},"25":{"start":{"line":69,"column":28},"end":{"line":69,"column":53}},"26":{"start":{"line":71,"column":31},"end":{"line":71,"column":132}},"27":{"start":{"line":73,"column":6},"end":{"line":96,"column":9}},"28":{"start":{"line":74,"column":8},"end":{"line":74,"column":15}},"29":{"start":{"line":78,"column":24},"end":{"line":78,"column":56}},"30":{"start":{"line":80,"column":10},"end":{"line":95,"column":13}},"31":{"start":{"line":81,"column":12},"end":{"line":81,"column":24}},"32":{"start":{"line":83,"column":15},"end":{"line":95,"column":13}},"33":{"start":{"line":85,"column":30},"end":{"line":85,"column":81}},"34":{"start":{"line":87,"column":28},"end":{"line":92,"column":15}},"35":{"start":{"line":94,"column":14},"end":{"line":94,"column":33}},"36":{"start":{"line":110,"column":2},"end":{"line":218,"column":5}},"37":{"start":{"line":114,"column":8},"end":{"line":114,"column":15}},"38":{"start":{"line":118,"column":8},"end":{"line":118,"column":27}},"39":{"start":{"line":120,"column":4},"end":{"line":217,"column":9}},"40":{"start":{"line":122,"column":21},"end":{"line":122,"column":65}},"41":{"start":{"line":124,"column":6},"end":{"line":130,"column":9}},"42":{"start":{"line":126,"column":22},"end":{"line":128,"column":9}},"43":{"start":{"line":129,"column":8},"end":{"line":129,"column":27}},"44":{"start":{"line":132,"column":9},"end":{"line":217,"column":9}},"45":{"start":{"line":134,"column":26},"end":{"line":134,"column":69}},"46":{"start":{"line":136,"column":8},"end":{"line":167,"column":11}},"47":{"start":{"line":140,"column":10},"end":{"line":166,"column":15}},"48":{"start":{"line":141,"column":12},"end":{"line":141,"column":24}},"49":{"start":{"line":143,"column":15},"end":{"line":166,"column":15}},"50":{"start":{"line":145,"column":30},"end":{"line":145,"column":81}},"51":{"start":{"line":147,"column":28},"end":{"line":152,"column":15}},"52":{"start":{"line":154,"column":14},"end":{"line":154,"column":33}},"53":{"start":{"line":159,"column":30},"end":{"line":164,"column":17}},"54":{"start":{"line":165,"column":16},"end":{"line":165,"column":35}},"55":{"start":{"line":171,"column":10},"end":{"line":171,"column":60}},"56":{"start":{"line":172,"column":10},"end":{"line":174,"column":13}},"57":{"start":{"line":175,"column":10},"end":{"line":216,"column":13}},"58":{"start":{"line":177,"column":29},"end":{"line":177,"column":124}},"59":{"start":{"line":179,"column":12},"end":{"line":215,"column":17}},"60":{"start":{"line":180,"column":14},"end":{"line":180,"column":26}},"61":{"start":{"line":182,"column":17},"end":{"line":215,"column":17}},"62":{"start":{"line":184,"column":32},"end":{"line":184,"column":83}},"63":{"start":{"line":186,"column":30},"end":{"line":191,"column":17}},"64":{"start":{"line":193,"column":16},"end":{"line":193,"column":35}},"65":{"start":{"line":197,"column":32},"end":{"line":202,"column":19}},"66":{"start":{"line":204,"column":18},"end":{"line":211,"column":19}},"67":{"start":{"line":205,"column":20},"end":{"line":205,"column":47}},"68":{"start":{"line":207,"column":20},"end":{"line":207,"column":51}},"69":{"start":{"line":209,"column":37},"end":{"line":209,"column":54}},"70":{"start":{"line":210,"column":20},"end":{"line":210,"column":54}},"71":{"start":{"line":214,"column":18},"end":{"line":214,"column":37}},"72":{"start":{"line":228,"column":2},"end":{"line":278,"column":5}},"73":{"start":{"line":232,"column":8},"end":{"line":232,"column":27}},"74":{"start":{"line":235,"column":4},"end":{"line":277,"column":7}},"75":{"start":{"line":237,"column":6},"end":{"line":243,"column":9}},"76":{"start":{"line":239,"column":22},"end":{"line":241,"column":9}},"77":{"start":{"line":242,"column":8},"end":{"line":242,"column":27}},"78":{"start":{"line":247,"column":8},"end":{"line":276,"column":11}},"79":{"start":{"line":249,"column":10},"end":{"line":275,"column":15}},"80":{"start":{"line":250,"column":12},"end":{"line":250,"column":24}},"81":{"start":{"line":252,"column":15},"end":{"line":275,"column":15}},"82":{"start":{"line":254,"column":30},"end":{"line":254,"column":79}},"83":{"start":{"line":256,"column":28},"end":{"line":261,"column":15}},"84":{"start":{"line":263,"column":14},"end":{"line":263,"column":33}},"85":{"start":{"line":267,"column":30},"end":{"line":273,"column":17}},"86":{"start":{"line":274,"column":16},"end":{"line":274,"column":35}},"87":{"start":{"line":279,"column":2},"end":{"line":279,"column":16}},"88":{"start":{"line":282,"column":0},"end":{"line":282,"column":26}}},"fnMap":{"0":{"name":"_interopRequireDefault","decl":{"start":{"line":18,"column":9},"end":{"line":18,"column":31}},"loc":{"start":{"line":18,"column":37},"end":{"line":18,"column":95}},"line":18},"1":{"name":"(anonymous_1)","decl":{"start":{"line":41,"column":16},"end":{"line":41,"column":17}},"loc":{"start":{"line":41,"column":25},"end":{"line":280,"column":1}},"line":41},"2":{"name":"(anonymous_2)","decl":{"start":{"line":65,"column":15},"end":{"line":65,"column":16}},"loc":{"start":{"line":65,"column":44},"end":{"line":97,"column":5}},"line":65},"3":{"name":"(anonymous_3)","decl":{"start":{"line":110,"column":38},"end":{"line":110,"column":39}},"loc":{"start":{"line":110,"column":67},"end":{"line":218,"column":3}},"line":110},"4":{"name":"(anonymous_4)","decl":{"start":{"line":124,"column":29},"end":{"line":124,"column":30}},"loc":{"start":{"line":124,"column":48},"end":{"line":130,"column":7}},"line":124},"5":{"name":"(anonymous_5)","decl":{"start":{"line":136,"column":39},"end":{"line":136,"column":40}},"loc":{"start":{"line":138,"column":13},"end":{"line":167,"column":9}},"line":138},"6":{"name":"(anonymous_6)","decl":{"start":{"line":175,"column":34},"end":{"line":175,"column":35}},"loc":{"start":{"line":175,"column":53},"end":{"line":216,"column":11}},"line":175},"7":{"name":"(anonymous_7)","decl":{"start":{"line":228,"column":37},"end":{"line":228,"column":38}},"loc":{"start":{"line":228,"column":66},"end":{"line":278,"column":3}},"line":228},"8":{"name":"(anonymous_8)","decl":{"start":{"line":237,"column":23},"end":{"line":237,"column":24}},"loc":{"start":{"line":237,"column":42},"end":{"line":243,"column":7}},"line":237},"9":{"name":"(anonymous_9)","decl":{"start":{"line":247,"column":23},"end":{"line":247,"column":24}},"loc":{"start":{"line":247,"column":42},"end":{"line":276,"column":9}},"line":247}},"branchMap":{"0":{"loc":{"start":{"line":18,"column":46},"end":{"line":18,"column":92}},"type":"cond-expr","locations":[{"start":{"line":18,"column":70},"end":{"line":18,"column":73}},{"start":{"line":18,"column":76},"end":{"line":18,"column":92}}],"line":18},"1":{"loc":{"start":{"line":18,"column":46},"end":{"line":18,"column":67}},"type":"binary-expr","locations":[{"start":{"line":18,"column":46},"end":{"line":18,"column":49}},{"start":{"line":18,"column":53},"end":{"line":18,"column":67}}],"line":18},"2":{"loc":{"start":{"line":63,"column":2},"end":{"line":98,"column":3}},"type":"if","locations":[{"start":{"line":63,"column":2},"end":{"line":98,"column":3}},{"start":{"line":63,"column":2},"end":{"line":98,"column":3}}],"line":63},"3":{"loc":{"start":{"line":63,"column":6},"end":{"line":63,"column":64}},"type":"binary-expr","locations":[{"start":{"line":63,"column":6},"end":{"line":63,"column":20}},{"start":{"line":63,"column":24},"end":{"line":63,"column":64}}],"line":63},"4":{"loc":{"start":{"line":67,"column":21},"end":{"line":67,"column":80}},"type":"binary-expr","locations":[{"start":{"line":67,"column":21},"end":{"line":67,"column":49}},{"start":{"line":67,"column":53},"end":{"line":67,"column":80}}],"line":67},"5":{"loc":{"start":{"line":67,"column":22},"end":{"line":67,"column":41}},"type":"binary-expr","locations":[{"start":{"line":67,"column":22},"end":{"line":67,"column":35}},{"start":{"line":67,"column":39},"end":{"line":67,"column":41}}],"line":67},"6":{"loc":{"start":{"line":67,"column":54},"end":{"line":67,"column":72}},"type":"binary-expr","locations":[{"start":{"line":67,"column":54},"end":{"line":67,"column":66}},{"start":{"line":67,"column":70},"end":{"line":67,"column":72}}],"line":67},"7":{"loc":{"start":{"line":71,"column":31},"end":{"line":71,"column":132}},"type":"binary-expr","locations":[{"start":{"line":71,"column":31},"end":{"line":71,"column":56}},{"start":{"line":71,"column":61},"end":{"line":71,"column":93}},{"start":{"line":71,"column":97},"end":{"line":71,"column":131}}],"line":71},"8":{"loc":{"start":{"line":73,"column":6},"end":{"line":96,"column":9}},"type":"if","locations":[{"start":{"line":73,"column":6},"end":{"line":96,"column":9}},{"start":{"line":73,"column":6},"end":{"line":96,"column":9}}],"line":73},"9":{"loc":{"start":{"line":73,"column":10},"end":{"line":73,"column":43}},"type":"binary-expr","locations":[{"start":{"line":73,"column":10},"end":{"line":73,"column":23}},{"start":{"line":73,"column":27},"end":{"line":73,"column":43}}],"line":73},"10":{"loc":{"start":{"line":80,"column":10},"end":{"line":95,"column":13}},"type":"if","locations":[{"start":{"line":80,"column":10},"end":{"line":95,"column":13}},{"start":{"line":80,"column":10},"end":{"line":95,"column":13}}],"line":80},"11":{"loc":{"start":{"line":80,"column":14},"end":{"line":80,"column":37}},"type":"binary-expr","locations":[{"start":{"line":80,"column":14},"end":{"line":80,"column":19}},{"start":{"line":80,"column":23},"end":{"line":80,"column":37}}],"line":80},"12":{"loc":{"start":{"line":83,"column":15},"end":{"line":95,"column":13}},"type":"if","locations":[{"start":{"line":83,"column":15},"end":{"line":95,"column":13}},{"start":{"line":83,"column":15},"end":{"line":95,"column":13}}],"line":83},"13":{"loc":{"start":{"line":83,"column":19},"end":{"line":83,"column":41}},"type":"binary-expr","locations":[{"start":{"line":83,"column":19},"end":{"line":83,"column":24}},{"start":{"line":83,"column":28},"end":{"line":83,"column":41}}],"line":83},"14":{"loc":{"start":{"line":85,"column":30},"end":{"line":85,"column":81}},"type":"binary-expr","locations":[{"start":{"line":85,"column":30},"end":{"line":85,"column":43}},{"start":{"line":85,"column":47},"end":{"line":85,"column":81}}],"line":85},"15":{"loc":{"start":{"line":118,"column":8},"end":{"line":118,"column":27}},"type":"binary-expr","locations":[{"start":{"line":118,"column":8},"end":{"line":118,"column":21}},{"start":{"line":118,"column":25},"end":{"line":118,"column":27}}],"line":118},"16":{"loc":{"start":{"line":120,"column":4},"end":{"line":217,"column":9}},"type":"if","locations":[{"start":{"line":120,"column":4},"end":{"line":217,"column":9}},{"start":{"line":120,"column":4},"end":{"line":217,"column":9}}],"line":120},"17":{"loc":{"start":{"line":120,"column":8},"end":{"line":120,"column":34}},"type":"binary-expr","locations":[{"start":{"line":120,"column":8},"end":{"line":120,"column":12}},{"start":{"line":120,"column":16},"end":{"line":120,"column":34}}],"line":120},"18":{"loc":{"start":{"line":132,"column":9},"end":{"line":217,"column":9}},"type":"if","locations":[{"start":{"line":132,"column":9},"end":{"line":217,"column":9}},{"start":{"line":132,"column":9},"end":{"line":217,"column":9}}],"line":132},"19":{"loc":{"start":{"line":132,"column":13},"end":{"line":132,"column":41}},"type":"binary-expr","locations":[{"start":{"line":132,"column":13},"end":{"line":132,"column":17}},{"start":{"line":132,"column":21},"end":{"line":132,"column":41}}],"line":132},"20":{"loc":{"start":{"line":140,"column":10},"end":{"line":166,"column":15}},"type":"if","locations":[{"start":{"line":140,"column":10},"end":{"line":166,"column":15}},{"start":{"line":140,"column":10},"end":{"line":166,"column":15}}],"line":140},"21":{"loc":{"start":{"line":140,"column":14},"end":{"line":140,"column":37}},"type":"binary-expr","locations":[{"start":{"line":140,"column":14},"end":{"line":140,"column":19}},{"start":{"line":140,"column":23},"end":{"line":140,"column":37}}],"line":140},"22":{"loc":{"start":{"line":143,"column":15},"end":{"line":166,"column":15}},"type":"if","locations":[{"start":{"line":143,"column":15},"end":{"line":166,"column":15}},{"start":{"line":143,"column":15},"end":{"line":166,"column":15}}],"line":143},"23":{"loc":{"start":{"line":143,"column":19},"end":{"line":143,"column":41}},"type":"binary-expr","locations":[{"start":{"line":143,"column":19},"end":{"line":143,"column":24}},{"start":{"line":143,"column":28},"end":{"line":143,"column":41}}],"line":143},"24":{"loc":{"start":{"line":145,"column":30},"end":{"line":145,"column":81}},"type":"binary-expr","locations":[{"start":{"line":145,"column":30},"end":{"line":145,"column":43}},{"start":{"line":145,"column":47},"end":{"line":145,"column":81}}],"line":145},"25":{"loc":{"start":{"line":179,"column":12},"end":{"line":215,"column":17}},"type":"if","locations":[{"start":{"line":179,"column":12},"end":{"line":215,"column":17}},{"start":{"line":179,"column":12},"end":{"line":215,"column":17}}],"line":179},"26":{"loc":{"start":{"line":179,"column":16},"end":{"line":179,"column":39}},"type":"binary-expr","locations":[{"start":{"line":179,"column":16},"end":{"line":179,"column":21}},{"start":{"line":179,"column":25},"end":{"line":179,"column":39}}],"line":179},"27":{"loc":{"start":{"line":182,"column":17},"end":{"line":215,"column":17}},"type":"if","locations":[{"start":{"line":182,"column":17},"end":{"line":215,"column":17}},{"start":{"line":182,"column":17},"end":{"line":215,"column":17}}],"line":182},"28":{"loc":{"start":{"line":182,"column":21},"end":{"line":182,"column":43}},"type":"binary-expr","locations":[{"start":{"line":182,"column":21},"end":{"line":182,"column":26}},{"start":{"line":182,"column":30},"end":{"line":182,"column":43}}],"line":182},"29":{"loc":{"start":{"line":184,"column":32},"end":{"line":184,"column":83}},"type":"binary-expr","locations":[{"start":{"line":184,"column":32},"end":{"line":184,"column":45}},{"start":{"line":184,"column":49},"end":{"line":184,"column":83}}],"line":184},"30":{"loc":{"start":{"line":204,"column":18},"end":{"line":211,"column":19}},"type":"if","locations":[{"start":{"line":204,"column":18},"end":{"line":211,"column":19}},{"start":{"line":204,"column":18},"end":{"line":211,"column":19}}],"line":204},"31":{"loc":{"start":{"line":204,"column":22},"end":{"line":204,"column":47}},"type":"binary-expr","locations":[{"start":{"line":204,"column":22},"end":{"line":204,"column":35}},{"start":{"line":204,"column":39},"end":{"line":204,"column":47}}],"line":204},"32":{"loc":{"start":{"line":232,"column":8},"end":{"line":232,"column":27}},"type":"binary-expr","locations":[{"start":{"line":232,"column":8},"end":{"line":232,"column":21}},{"start":{"line":232,"column":25},"end":{"line":232,"column":27}}],"line":232},"33":{"loc":{"start":{"line":235,"column":4},"end":{"line":277,"column":7}},"type":"if","locations":[{"start":{"line":235,"column":4},"end":{"line":277,"column":7}},{"start":{"line":235,"column":4},"end":{"line":277,"column":7}}],"line":235},"34":{"loc":{"start":{"line":235,"column":8},"end":{"line":235,"column":36}},"type":"binary-expr","locations":[{"start":{"line":235,"column":8},"end":{"line":235,"column":12}},{"start":{"line":235,"column":16},"end":{"line":235,"column":36}}],"line":235},"35":{"loc":{"start":{"line":249,"column":10},"end":{"line":275,"column":15}},"type":"if","locations":[{"start":{"line":249,"column":10},"end":{"line":275,"column":15}},{"start":{"line":249,"column":10},"end":{"line":275,"column":15}}],"line":249},"36":{"loc":{"start":{"line":249,"column":14},"end":{"line":249,"column":37}},"type":"binary-expr","locations":[{"start":{"line":249,"column":14},"end":{"line":249,"column":19}},{"start":{"line":249,"column":23},"end":{"line":249,"column":37}}],"line":249},"37":{"loc":{"start":{"line":252,"column":15},"end":{"line":275,"column":15}},"type":"if","locations":[{"start":{"line":252,"column":15},"end":{"line":275,"column":15}},{"start":{"line":252,"column":15},"end":{"line":275,"column":15}}],"line":252},"38":{"loc":{"start":{"line":252,"column":19},"end":{"line":252,"column":41}},"type":"binary-expr","locations":[{"start":{"line":252,"column":19},"end":{"line":252,"column":24}},{"start":{"line":252,"column":28},"end":{"line":252,"column":41}}],"line":252},"39":{"loc":{"start":{"line":254,"column":30},"end":{"line":254,"column":79}},"type":"binary-expr","locations":[{"start":{"line":254,"column":30},"end":{"line":254,"column":43}},{"start":{"line":254,"column":47},"end":{"line":254,"column":79}}],"line":254}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":5,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":6,"25":6,"26":6,"27":6,"28":5,"29":1,"30":1,"31":0,"32":1,"33":1,"34":1,"35":1,"36":1,"37":3,"38":3,"39":3,"40":1,"41":1,"42":1,"43":1,"44":2,"45":1,"46":1,"47":1,"48":0,"49":1,"50":0,"51":0,"52":0,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":0,"61":1,"62":0,"63":0,"64":0,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":2,"74":2,"75":1,"76":1,"77":1,"78":1,"79":1,"80":0,"81":1,"82":0,"83":0,"84":0,"85":1,"86":1,"87":1,"88":1},"f":{"0":5,"1":1,"2":6,"3":3,"4":1,"5":1,"6":1,"7":2,"8":1,"9":1},"b":{"0":[0,5],"1":[5,5],"2":[1,0],"3":[1,1],"4":[6,1],"5":[6,0],"6":[1,0],"7":[6,3,2],"8":[5,1],"9":[6,1],"10":[0,1],"11":[1,1],"12":[1,0],"13":[1,1],"14":[1,0],"15":[3,0],"16":[1,2],"17":[3,2],"18":[1,1],"19":[2,1],"20":[0,1],"21":[1,0],"22":[0,1],"23":[1,0],"24":[0,0],"25":[0,1],"26":[1,0],"27":[0,1],"28":[1,0],"29":[0,0],"30":[1,0],"31":[1,1],"32":[2,0],"33":[1,1],"34":[2,1],"35":[0,1],"36":[1,0],"37":[0,1],"38":[1,0],"39":[0,0]},"inputSourceMap":{"version":3,"sources":["index.js"],"names":["router","express","Router","TASK_SEND","TASK_RESULT","TASK_SENT","MESSAGE_FIELDS","smssync","optns","options","_","merge","endpoint","secret","reply","error","use","respond","bodyParser","json","urlencoded","extended","isEmpty","request","response","next","query","body","isValidSecret","isAllowedRequest","method","task","Error","message","payload","success","ok","post","queued","get","onSent","result","queued_messages","concat","delivered","onDelivered","pick","hash","onReceive","hasReply","size","compact","map","messages","onQueued","message_uuids","onSend"],"mappings":"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","sourceRoot":"/home/benson/Workspace/osp/smssync/src","sourcesContent":["/**\n * @name smssync\n * @description smsync endpoint for nodejs\n * @author lally elias <lallyelias87@mail.com>\n * @since  0.1.0\n * @version 0.1.0\n */\n\n// dependencies\nimport _ from 'lodash';\nimport express from 'express';\nimport respond from 'express-respond';\nimport bodyParser from 'body-parser';\nimport hash from 'object-hash';\n\nconst router = express.Router();\n\n// smssync tasks\nexport const TASK_SEND = 'send';\nexport const TASK_RESULT = 'result';\nexport const TASK_SENT = 'sent';\n\n// sms message fields\nexport const MESSAGE_FIELDS = [\n  'from',\n  'message',\n  'message_id',\n  'sent_to',\n  'device_id',\n  'sent_timestamp',\n];\n\nexport const smssync = optns => {\n  // merge options\n  const options = _.merge(\n    {},\n    {\n      // endpoint path\n      endpoint: 'smssync',\n\n      // a secret key to be used verify smssync device\n      secret: 'smssync',\n\n      // allow to reply with a sms to a sender\n      reply: true,\n\n      // allow internal error handling & no error will be passed to error\n      // middleware\n      error: true,\n    },\n    optns\n  );\n\n  // use express respond\n  router.use(respond);\n\n  // apply body parser middlewares\n  router.use(bodyParser.json());\n  router.use(\n    bodyParser.urlencoded({\n      extended: true,\n    })\n  );\n\n  // protect endpoint with secret\n  if (options.secret && !_.isEmpty(options.secret)) {\n    // use middleware to protect endpoint using a secret\n    router.use((request, response, next) => {\n      // obtain secret from query or body\n      const secret =\n        (request.query || {}).secret || (request.body || {}).secret;\n\n      // ensure secret match\n      const isValidSecret = options.secret === secret;\n\n      // allowed request url\n      const isAllowedRequest =\n        request.method === 'POST' &&\n        (request.query.task === TASK_SENT ||\n          request.query.task === TASK_RESULT);\n\n      // handle request if has valid secret\n      if (isValidSecret || isAllowedRequest) {\n        next();\n      }\n\n      // throw authorization error\n      else {\n        // prepare error\n        const error = new Error('Secret Key Mismatch');\n\n        // pass error to error handler middleware\n        if (error && !options.error) {\n          next(error);\n        }\n\n        // handle error\n        else if (error && options.error) {\n          // obtain error message\n          const message = error.message || 'Fail to process delivery reports';\n\n          // prepare smsync error response\n          const reply = {\n            payload: {\n              success: false,\n              error: message,\n            },\n          };\n\n          // respond with error\n          response.ok(reply);\n        }\n      }\n    });\n  }\n\n  // TODO add sender blacklist\n\n  /**\n   * @description Handle Http POST on /smssync\n   *\n   * @description receive smssync sent sms\n   * @param  {object} request  a http request\n   * @param  {object} response a http response\n   * @param {Function} next next middleware to invoke incase of error\n   */\n  router.post(`/${options.endpoint}`, (request, response, next) => {\n    // obtain sent sms, queued sms uuids or sms delivery result\n    let { body } = request;\n\n    // obtain request task\n    const { task } = request.query || {};\n\n    // handle sent delivery status\n    if (task && task === TASK_SENT) {\n      // handle over queued message uuids\n      const queued = _.get(body, 'queued_messages');\n      options.onSent(queued, (error, result) => {\n        // prepare sent reply\n        const reply = {\n          queued_messages: [].concat(result),\n        };\n\n        response.ok(reply);\n      });\n    }\n\n    // handle delivery status(reports)\n    else if (task && task === TASK_RESULT) {\n      // hand over deliveries reports\n      const delivered = _.get(body, 'message_result');\n      options.onDelivered(delivered, (error /* , result */) => {\n        // pass error to error handler middleware\n        if (error && !options.error) {\n          next(error);\n        }\n\n        // handle error\n        else if (error && options.error) {\n          // obtain error message\n          const message = error.message || 'Fail to process delivery reports';\n\n          // prepare smsync error response\n          const reply = {\n            payload: {\n              success: false,\n              error: message,\n            },\n          };\n\n          // respond with error\n          response.ok(reply);\n        }\n\n        // handle success\n        else {\n          // prepare smsync success response for delivery report\n          // TODO check for smssync specific format\n          const reply = {\n            payload: {\n              success: true,\n              error: null,\n            },\n          };\n\n          response.ok(reply);\n        }\n      });\n    }\n\n    // receive sms and hand over to a message receiver\n    else {\n      // extend body with sms hash for only valid allowed smssync field\n      body = _.pick(body, MESSAGE_FIELDS);\n      body = _.merge({}, body, {\n        hash: hash(body),\n      });\n\n      options.onReceive(body, (error, result) => {\n        // check if receive provide a reply\n        const hasReply = _.size(_.compact(_.map([].concat(result), 'to'))) > 0;\n\n        // pass error to error handler middleware\n        if (error && !options.error) {\n          next(error);\n        }\n\n        // handle error\n        else if (error && options.error) {\n          // obtain error message\n          const message = error.message || 'Fail to process received message';\n\n          // prepare smsync error response\n          const reply = {\n            payload: {\n              success: false,\n              error: message,\n            },\n          };\n\n          // respond with error\n          response.ok(reply);\n        }\n\n        // handle success\n        else {\n          // prepare smsync success response\n          const reply = {\n            payload: {\n              success: true,\n              error: null,\n            },\n          };\n\n          // check if smsync endpoint is configure to reply with sms\n          if (options.reply && hasReply) {\n            delete reply.payload.error;\n\n            // update reply with reply message(s)\n            reply.payload.task = TASK_SEND;\n\n            // prepare reply messages\n            const messages = [].concat(result);\n            reply.payload.messages = messages;\n          }\n\n          // respond with success\n          response.ok(reply);\n        }\n      });\n    }\n  });\n\n  /**\n   * @description Handle Http GET on /smssync\n   *\n   * @description provide smssync with sms to send\n   * @param  {object} request  a http request\n   * @param  {object} response a http response\n   * @param {Function} next next middleware to invoke incase of error\n   */\n  router.get(`/${options.endpoint}`, (request, response, next) => {\n    // obtain request task\n    const { task } = request.query || {};\n\n    // handle result task and respond with sms waiting\n    // delivery report\n    if (task && task === TASK_RESULT) {\n      // obtain sms waiting delivery report\n      options.onQueued((error, result) => {\n        // prepare wait delivery reply\n        const reply = {\n          message_uuids: [].concat(result),\n        };\n\n        response.ok(reply);\n      });\n    }\n\n    // reply with sms to send\n    else {\n      // obtain sms to send\n      options.onSend((error, result) => {\n        // pass error to error handler middleware\n        if (error && !options.error) {\n          next(error);\n        }\n\n        // handle error\n        else if (error && options.error) {\n          // obtain error message\n          const message = error.message || 'Fail to obtain message to send';\n\n          // prepare smsync error response\n          const reply = {\n            payload: {\n              success: false,\n              error: message,\n            },\n          };\n\n          // respond with error\n          response.ok(reply);\n        }\n\n        // handle success\n        else {\n          // prepare sms to send reply\n          const reply = {\n            payload: {\n              task: TASK_SEND,\n              secret: options.secret,\n              messages: [].concat(result),\n            },\n          };\n\n          response.ok(reply);\n        }\n      });\n    }\n  });\n\n  return router;\n};\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2458a3866a9f99394b471b548e5c0cd31dd9f8bd","contentHash":"52f0c9048e9a4b4e2834611c39739cfc9aed4d5a443c454b0d8a07f365f13a5c"}}